"""
Comando Django para carregar todas as localiza√ß√µes da Regi√£o Metropolitana do Recife
Uso: python manage.py carregar_localizacoes_rmr
"""

from django.core.management.base import BaseCommand
from backend.pessoas.models import LocalizacaoInteresse


class Command(BaseCommand):
    help = 'Carrega cidades e bairros da Regi√£o Metropolitana do Recife'

    # 15 Munic√≠pios da Regi√£o Metropolitana do Recife
    CIDADES_RMR = [
        'Abreu e Lima',
        'Ara√ßoiaba',
        'Cabo de Santo Agostinho',
        'Camaragibe',
        'Goiana',
        'Igarassu',
        'Ipojuca',
        'Itamarac√°',
        'Itapissuma',
        'Jaboat√£o dos Guararapes',
        'Moreno',
        'Olinda',
        'Paulista',
        'Recife',
        'S√£o Louren√ßo da Mata',
    ]

    # 94 Bairros Oficiais de Recife
    # Fonte: Lei Municipal n¬∫ 16.293/1997 e atualiza√ß√µes
    BAIRROS_RECIFE = [
        'Aflitos', 'Afogados', '√Ågua Fria', 'Alto do Mandu', 'Alto Jos√© Bonif√°cio',
        'Alto Jos√© do Pinho', 'Alto Santa Terezinha', 'Apipucos', 'Areias', 'Arruda',
        'Barro', 'Beberibe', 'Boa Viagem', 'Boa Vista', 'Bomba do Hemet√©rio',
        'Bongi', 'Bras√≠lia Teimosa', 'Brejo da Guabiraba', 'Brejo de Beberibe', 'Cabanga',
        'Caxang√°', 'Campina do Barreto', 'Campo Grande', 'Casa Amarela', 'Casa Forte',
        'Cavaleiro', 'Cidade Universit√°ria', 'Coelhos', 'Cohab', 'Coqueiral',
        'Cordeiro', 'C√≥rrego do Jenipapo', 'Curado', 'Derby', 'Dois Irm√£os',
        'Dois Unidos', 'Encruzilhada', 'Engenho do Meio', 'Espinheiro', 'Est√¢ncia',
        'Fund√£o', 'Gra√ßas', 'Guabiraba', 'Hip√≥dromo', 'Ibura',
        'Ilha do Leite', 'Ilha do Retiro', 'Ilha Joana Bezerra', 'Imbiribeira', 'Ipsep',
        'Iputinga', 'Jardim S√£o Paulo', 'Jiqui√°', 'Jord√£o', 'Linha do Tiro',
        'Macaxeira', 'Madalena', 'Mangueira', 'Mangabeira', 'Monteiro',
        'Morro da Concei√ß√£o', 'Mustardinha', 'Nova Descoberta', 'Paissandu', 'Parnamirim',
        'Peixinhos', 'Pena', 'Pina', 'Po√ßo da Panela', 'Ponto de Parada',
        'Porto da Madeira', 'Recife', 'Rosarinho', 'San Martin', 'Sancho',
        'Santana', 'Santo Amaro', 'Santo Ant√¥nio', 'S√£o Jos√©', 'S√≠tio dos Pintos',
        'S√≠tio Wanderley', 'Soledade', 'Sucupira', 'Tamarineira', 'Tejipi√≥',
        'Torre', 'Torre√£o', 'Torr√µes', 'V√°rzea', 'Vasco da Gama', 'Zumbi',
    ]

    def add_arguments(self, parser):
        parser.add_argument(
            '--limpar',
            action='store_true',
            help='Limpar localiza√ß√µes existentes antes de carregar',
        )
        parser.add_argument(
            '--apenas-cidades',
            action='store_true',
            help='Carregar apenas cidades',
        )
        parser.add_argument(
            '--apenas-bairros',
            action='store_true',
            help='Carregar apenas bairros',
        )

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üåç Carregando localiza√ß√µes da RMR...'))

        cidades_criadas = 0
        bairros_criados = 0
        
        # Carregar cidades
        if not options['apenas_bairros']:
            if options['limpar']:
                LocalizacaoInteresse.objects.filter(tipo='cidade', estado='PE').delete()
            
            self.stdout.write('üìç Carregando cidades da RMR...')
            for ordem, cidade in enumerate(sorted(self.CIDADES_RMR), start=1):
                obj, created = LocalizacaoInteresse.objects.get_or_create(
                    nome=cidade,
                    tipo='cidade',
                    defaults={
                        'cidade': cidade,
                        'estado': 'PE',
                        'ordem': ordem,
                        'ativo': True,
                    }
                )
                if created:
                    cidades_criadas += 1
        
        # Carregar bairros
        if not options['apenas_cidades']:
            if options['limpar']:
                LocalizacaoInteresse.objects.filter(tipo='bairro', cidade='Recife').delete()
            
            self.stdout.write('üèòÔ∏è  Carregando bairros de Recife...')
            # Remover duplicatas e ordenar
            bairros_unicos = sorted(set(self.BAIRROS_RECIFE))
            
            for ordem, bairro in enumerate(bairros_unicos, start=1):
                obj, created = LocalizacaoInteresse.objects.get_or_create(
                    nome=bairro,
                    tipo='bairro',
                    cidade='Recife',
                    defaults={
                        'estado': 'PE',
                        'ordem': ordem,
                        'ativo': True,
                    }
                )
                if created:
                    bairros_criados += 1

        # Resumo
        total_cidades = LocalizacaoInteresse.objects.filter(tipo='cidade', estado='PE').count()
        total_bairros = LocalizacaoInteresse.objects.filter(tipo='bairro', cidade='Recife').count()
        
        self.stdout.write(self.style.SUCCESS('\nüìä Resumo:'))
        self.stdout.write(f'  ‚úÖ Cidades criadas: {cidades_criadas}')
        self.stdout.write(f'  ‚úÖ Bairros criados: {bairros_criados}')
        self.stdout.write(f'  üìç Total cidades: {total_cidades}')
        self.stdout.write(f'  üèòÔ∏è  Total bairros: {total_bairros}')
        self.stdout.write(self.style.SUCCESS(f'\nüéâ Total: {total_cidades + total_bairros} localiza√ß√µes!'))

